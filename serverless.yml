# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: aimanzaidi
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: openvpn-aws
# "service" is the name of this project. This will also be added to your AWS resource names.
service: openvpn-serverless-lambda

provider:
  name: aws
  runtime: python3.12
  iam:
    role: 
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:TagResource
          Resource:
            - 'Fn::Join':
              - ':'
              -
                - 'arn:aws:logs'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'log-group:/aws/lambda/*:*:*'
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource: arn:aws:s3:::openvpn-bot-storage
  region: ap-southeast-1
  layers:
      - arn:aws:lambda:ap-southeast-1:178903630933:layer:telegram_bot_dependencies:2
  deploymentBucket:
    name: openvpn-bot-storage
    serverSideEncryption: AES256

plugins:
  - serverless-iam-roles-per-function
  - serverless-deployment-bucket

layers:
  telegram_bot_dependencies:
    path: layers
    compatibleRuntimes:
      - python3.12

functions:
  common:
    handler: handler.main
    iamRoleStatementsName: common-openvpn-serverless-lambda-lambdaRole
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - cloudformation:CreateStack
          - cloudformation:DeleteStack
          - s3:GetObject
          - iam:CreateRole
          - iam:PutRolePolicy
          - iam:DeleteRole
          - iam:DeleteRolePolicy
          - iam:CreateInstanceProfile
          - iam:AddRoleToInstanceProfile
          - iam:DeleteInstanceProfile
          - iam:RemoveRoleFromInstanceProfile
          - iam:PassRole
          - ec2:DescribeInstances
          - ec2:RunInstances
          - ec2:TerminateInstances
          - ec2:AssociateIamInstanceProfile
          - ec2:DisassociateIamInstanceProfile
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: "*"
    environment:
      BOT_TOKEN: ${ssm:/telegram_bot_token}
      BOT_CHAT_ID: ${ssm:/telegram_bot_chatid}
      CF_TEMPLATE_URL: ${ssm:/cf_template_url}
    events:
      - httpApi:
          path: /common
          method: post
  s3Trigger:
    handler: handler.clientUploaded
    iamRoleStatementsName: s3Trigger-openvpn-serverless-lambda-lambdaRole
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - s3:GetObject        
        Resource: "arn:aws:s3:::openvpn-bot-storage/client/*"
    environment:
      BOT_TOKEN: ${ssm:/telegram_bot_token}
      BOT_CHAT_ID: ${ssm:/telegram_bot_chatid}
    events:
      - s3:
          bucket: openvpn-bot-storage
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: client/

resources:
  Resources:
      authorizeTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: openvpn-auth
          AttributeDefinitions:
            - AttributeName: login_id
              AttributeType: S
            - AttributeName: timeStamp
              AttributeType: S
          KeySchema:
            - AttributeName: login_id
              KeyType: HASH
            - AttributeName: timeStamp
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

